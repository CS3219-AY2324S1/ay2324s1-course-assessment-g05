name: Build and deploy image to AWS ECS (Prod)

on:
  push:
    branches: ["production"]

env:
  AWS_REGION: ap-southeast-1
  ECR_REPOSITORY: peerprep-production-ecr-repo
  ECS_CLUSTER: peerprep-production-ECSCluster

  QUESTION_CONTAINER_NAME: question-service
  MATCHING_CONTAINER_NAME: matching-service
  AUTH_CONTAINER_NAME: auth-service
  USER_CONTAINER_NAME: user-service
  COLLABORATION_CONTAINER_NAME: collaboration-service
  HISTORY_CONTAINER_NAME: history-service
  COLLABORATION_CACHE_CONTAINER_NAME: collaboration-cache
  EVENT_BUS_CONTAINER_NAME: event-bus

permissions:
  contents: read

jobs:
  build:
    name: Build service images
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Check for Changes in question-service directory
        id: check-question-service-changes
        run: |
          if git diff --quiet HEAD~1 -- backend/${{ env.QUESTION_CONTAINER_NAME }}; then
              echo "No changes in question-service directory"
              echo "changes=false" >> "$GITHUB_OUTPUT"
          else
              echo "Changes detected in question-service directory"
              echo "changes=true" >> "$GITHUB_OUTPUT"
          fi
        shell: bash

      - name: Build, tag, and push ${{ env.QUESTION_CONTAINER_NAME }} image to Amazon ECR
        if: steps.check-question-service-changes.outputs.changes == 'true'
        uses: docker/build-push-action@v5
        with:
          context: backend/${{ env.QUESTION_CONTAINER_NAME }}
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.QUESTION_CONTAINER_NAME }}
          build-args: |
            NODE_ENV=${{ vars.BUILD_ENV }}
            LOG_LEVEL=${{ vars.LOG_LEVEL }}
            CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}
            DATABASE_URL=${{ secrets.DATABASE_URL }}

      - name: Check for Changes in matching-service directory
        id: check-matching-service-changes
        run: |
          if git diff --quiet HEAD~1 -- backend/${{ env.MATCHING_CONTAINER_NAME }}; then
              echo "No changes in matching-service directory"
              echo "changes=false" >> "$GITHUB_OUTPUT"
          else
              echo "Changes detected in matching-service directory"
              echo "changes=true" >> "$GITHUB_OUTPUT"
          fi
        shell: bash

      - name: Build, tag, and push ${{ env.MATCHING_CONTAINER_NAME }} image to Amazon ECR
        if: steps.check-matching-service-changes.outputs.changes == 'true'
        uses: docker/build-push-action@v5
        with:
          context: backend/${{ env.MATCHING_CONTAINER_NAME }}
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.MATCHING_CONTAINER_NAME }}
          build-args: |
            NODE_ENV=${{ vars.BUILD_ENV }}
            LOG_LEVEL=${{ vars.LOG_LEVEL }}
            CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}
            MATCHING_TIMEOUT=${{ vars.MATCHING_TIMEOUT }}

      - name: Build, tag, and push ${{ env.AUTH_CONTAINER_NAME }} image to Amazon ECR
        if: steps.check-auth-service-changes.outputs.changes == 'true'
        uses: docker/build-push-action@v5
        with:
          context: backend/${{ env.AUTH_CONTAINER_NAME }}
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.AUTH_CONTAINER_NAME }}
          build-args: |
            NODE_ENV=${{ vars.BUILD_ENV }}
            LOG_LEVEL=${{ vars.LOG_LEVEL }}
            CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            EMAIL_VERIFICATION_SECRET=${{ secrets.EMAIL_VERIFICATION_SECRET }}
            NM_MAIL=${{ secrets.NM_MAIL }}
            NM_PASS=${{ secrets.NM_PASS }}
            CLOUD_URL=${{ vars.FRONTEND_URL }}
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            EMAIL_RESET_SECRET=${{ secrets.EMAIL_RESET_SECRET }}
            SERVICE_SECRET=${{ secrets.SERVICE_SECRET }}

      - name: Check for Changes in user-service directory
        id: check-user-service-changes
        run: |
          if git diff --quiet HEAD~1 -- backend/${{ env.USER_CONTAINER_NAME }}; then
              echo "No changes in user-service directory"
              echo "changes=false" >> "$GITHUB_OUTPUT"
          else
              echo "Changes detected in user-service directory"
              echo "changes=true" >> "$GITHUB_OUTPUT"
          fi
        shell: bash

      - name: Build, tag, and push ${{ env.USER_CONTAINER_NAME }} image to Amazon ECR
        if: steps.check-user-service-changes.outputs.changes == 'true'
        uses: docker/build-push-action@v5
        with:
          context: backend/${{ env.USER_CONTAINER_NAME }}
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.USER_CONTAINER_NAME }}
          build-args: |
            NODE_ENV=${{ vars.BUILD_ENV }}
            LOG_LEVEL=${{ vars.LOG_LEVEL }}
            CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            SERVICE_SECRET=${{ secrets.SERVICE_SECRET }}

      - name: Check for Changes in collaboration-service directory
        id: check-collaboration-service-changes
        run: |
          if git diff --quiet HEAD~1 -- backend/${{ env.COLLABORATION_CONTAINER_NAME }}; then
              echo "No changes in collaboration-service directory"
              echo "changes=false" >> "$GITHUB_OUTPUT"
          else
              echo "Changes detected in collaboration-service directory"
              echo "changes=true" >> "$GITHUB_OUTPUT"
          fi
        shell: bash

      - name: Build, tag, and push ${{ env.COLLABORATION_CONTAINER_NAME }} image to Amazon ECR
        if: steps.check-collaboration-service-changes == 'true'
        uses: docker/build-push-action@v5
        with:
          context: backend/${{ env.COLLABORATION_CONTAINER_NAME }}
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.COLLABORATION_CONTAINER_NAME }}
          build-args: |
            NODE_ENV=${{ vars.BUILD_ENV }}
            LOG_LEVEL=${{ vars.LOG_LEVEL }}
            CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}
            REDIS_URL=${{ secrets.COLLABORATION_CACHE_URL }}
            EVENT_BUS_CONTAINER_NAME=${{ env.EVENT_BUS_CONTAINER_NAME }}

      - name: Build, tag, and push ${{ env.COLLABORATION_CACHE_CONTAINER_NAME }} image to Amazon ECR
        if: steps.check-collaboration-cache-changes == 'true'
        uses: docker/build-push-action@v5
        with:
          context: database/${{ env.COLLABORATION_CACHE_CONTAINER_NAME }}
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.COLLABORATION_CACHE_CONTAINER_NAME }}

      # - name: Check for Changes in history directory
      #   id: check-history-changes
      #   run: |
      #       if git diff --quiet HEAD~1 -- backend/${{ env.HISTORY_CONTAINER_NAME }}; then
      #           echo "No changes in history directory"
      #           echo "changes=false" >> "$GITHUB_OUTPUT"
      #       else
      #           echo "Changes detected in history directory"
      #           echo "changes=true" >> "$GITHUB_OUTPUT"
      #       fi
      #   shell: bash

      - name: Build, tag, and push ${{ env.HISTORY_CONTAINER_NAME }} image to Amazon ECR
        # if: steps.check-event-bus-changes == 'true'
        uses: docker/build-push-action@v5
        with:
          context: backend/${{ env.HISTORY_CONTAINER_NAME }}
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.HISTORY_CONTAINER_NAME }}
          build-args: |
            NODE_ENV=${{ vars.BUILD_ENV }}
            LOG_LEVEL=${{ vars.LOG_LEVEL }}
            CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}
            DATABASE_URL=${{ secrets.DATABASE_URL }}

      # - name: Check for Changes in event-bus directory
      #   id: check-event-bus-changes
      #   run: |
      #       if git diff --quiet HEAD~1 -- database/${{ env.EVENT_BUS_CONTAINER_NAME }}; then
      #           echo "No changes in event-bus directory"
      #           echo "changes=false" >> "$GITHUB_OUTPUT"
      #       else
      #           echo "Changes detected in event-bus directory"
      #           echo "changes=true" >> "$GITHUB_OUTPUT"
      #       fi
      #   shell: bash

      - name: Build, tag, and push ${{ env.EVENT_BUS_CONTAINER_NAME }} image to Amazon ECR
        # if: steps.check-event-bus-changes == 'true'
        uses: docker/build-push-action@v5
        with:
          context: database/${{ env.EVENT_BUS_CONTAINER_NAME }}
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.EVENT_BUS_CONTAINER_NAME }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    needs: build
    strategy:
      matrix:
        service: [
            {
              name: question-service,
              ecs_service: peerprep-production-ServiceQuestion,
              ecs_task_def: peerprep-production-TaskDefinitionQuestion,
            },
            {
              name: matching-service,
              ecs_service: peerprep-production-ServiceMatching,
              ecs_task_def: peerprep-production-TaskDefinitionMatching,
            },
            {
              name: user-service,
              ecs_service: peerprep-production-ServiceUser,
              ecs_task_def: peerprep-production-TaskDefinitionUser,
            },
            {
              name: auth-service,
              ecs_service: peerprep-production-ServiceAuth,
              ecs_task_def: peerprep-production-TaskDefinitionAuth,
            },
            {
              name: collaboration-service,
              ecs_service: peerprep-production-ServiceCollaboration,
              ecs_task_def: peerprep-production-TaskDefinitionCollaboration,
            },
            {
              name: event-bus,
              ecs_service: peerprep-development-ServiceEventBus,
              ecs_task_def: peerprep-development-TaskDefinitionEventBus,
            },
            # {
            #   name: history-service,
            #   ecs_service:  peerprep-production-ServiceHistory,
            #   ecs_task_def: peerprep-production-TaskDefinitionHistory
            # },
          ]

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Download ${{ matrix.service.name }} task definition
        if: steps.check-${{ matrix.service.name }}-changes.outputs.changes == 'true'
        id: download-task-def
        env:
          FAMILY: ${{ matrix.service.ecs_task_def }}
        run: |
          aws ecs describe-task-definition --task-definition $FAMILY --query taskDefinition > $FAMILY.json
          echo "file=$FAMILY.json" >> "$GITHUB_OUTPUT"

      - name: Fill in the ${{ matrix.service.name }} image ID in the Amazon ECS task definition
        if: steps.check-${{ matrix.service.name }}-changes.outputs.changes == 'true'
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.download-task-def.outputs.file }}
          container-name: ${{ matrix.service.name }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ matrix.service.name }}

      - name: Deploy Amazon ECS ${{ matrix.service.name }} task definition
        if: steps.check-${{ matrix.service.name }}-changes.outputs.changes == 'true'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ matrix.service.ecs_service }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
