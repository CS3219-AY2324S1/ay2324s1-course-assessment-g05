name: Build and deploy image to AWS ECS (Dev)

on:
  push:
    branches: [ "master", "development" ]

env:
  AWS_REGION:     ap-southeast-1
  ECR_REPOSITORY: peerprep-ecr-container-dev-repo
  ECS_CLUSTER:    peerprep-ECSDevCluster
  
  QUESTION_CONTAINER_NAME:      question-service
  MATCHING_CONTAINER_NAME:      matching-service
  AUTH_CONTAINER_NAME:          auth-service
  USER_CONTAINER_NAME:          user-service
  COLLABORATION_CONTAINER_NAME: collaboration-service
  HISTORY_CONTAINER_NAME:       history-service

permissions:
  contents: read

jobs:
  build:
    name: Build service images
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v3
  
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
  
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push ${{ env.QUESTION_CONTAINER_NAME }} image to Amazon ECR
        uses: docker/build-push-action@v5
        with: 
          context: backend/${{ env.QUESTION_CONTAINER_NAME }}
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.QUESTION_CONTAINER_NAME }}
          build-args: |
            NODE_ENV=${{ vars.BUILD_ENV }}
            LOG_LEVEL=${{ vars.LOG_LEVEL }}
            CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}
            DATABASE_URL=${{ secrets.DATABASE_URL }}

      - name: Build, tag, and push ${{ env.MATCHING_CONTAINER_NAME }} image to Amazon ECR
        uses: docker/build-push-action@v5
        with: 
          context: backend/${{ env.MATCHING_CONTAINER_NAME }}
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.MATCHING_CONTAINER_NAME }}
          build-args: |
            NODE_ENV=${{ vars.BUILD_ENV }}
            LOG_LEVEL=${{ vars.LOG_LEVEL }}
            CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}
            MATCHING_TIMEOUT=${{ vars.MATCHING_TIMEOUT }} 

      - name: Build, tag, and push ${{ env.AUTH_CONTAINER_NAME }} image to Amazon ECR
        uses: docker/build-push-action@v5
        with: 
          context: backend/${{ env.AUTH_CONTAINER_NAME }}
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.AUTH_CONTAINER_NAME }}
          build-args: |
            NODE_ENV=${{ vars.BUILD_ENV }}
            LOG_LEVEL=${{ vars.LOG_LEVEL }}
            CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            EMAIL_VERIFICATION_SECRET=${{ secrets.EMAIL_VERIFICATION_SECRET }}
            NM_MAIL=${{ secrets.NM_MAIL }}
            NM_PASS=${{ secrets.NM_PASS }}

      - name: Build, tag, and push ${{ env.USER_CONTAINER_NAME }} image to Amazon ECR
        uses: docker/build-push-action@v5
        with: 
          context: backend/${{ env.USER_CONTAINER_NAME }}
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.USER_CONTAINER_NAME }}
          build-args: |
            NODE_ENV=${{ vars.BUILD_ENV }}
            LOG_LEVEL=${{ vars.LOG_LEVEL }}
            CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            EMAIL_VERIFICATION_SECRET=${{ secrets.EMAIL_VERIFICATION_SECRET }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: development
    needs: build
    strategy:
      matrix:
        service: [
          {
            name: question-service,
            ecs_service: peerprep-ServiceDevQuestion,
            ecs_task_def: peerprep-TaskDefinitionDevQuestion
          },
          {
            name: matching-service,
            ecs_service: peerprep-ServiceDevMatching,
            ecs_task_def: peerprep-TaskDefinitionDevMatching
          },
          {
            name: user-service,
            ecs_service: peerprep-ServiceDevUser,
            ecs_task_def: peerprep-TaskDefinitionDevUser
          },
          {
            name: auth-service,
            ecs_service: peerprep-ServiceDevAuth,
            ecs_task_def: peerprep-TaskDefinitionDevAuth
          },
          # {
          #   name: collaboration-service,
          #   ecs_service: peerprep-ServiceDevCollaboration,
          #   ecs_task_def: peerprep-TaskDefinitionDevCollaboration
          # },
          # {
          #   name: history-service,
          #   ecs_service: peerprep-ServiceDevHistory,
          #   ecs_task_def: peerprep-TaskDefinitionDevHistory
          # },
        ]

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Download ${{ matrix.service.name }} task definition
        id: download-task-def
        env:
          FAMILY: ${{ matrix.service.ecs_task_def }}
        run: |
          aws ecs describe-task-definition --task-definition $FAMILY --query taskDefinition > $FAMILY.json
          echo "file=$FAMILY.json" >> "$GITHUB_OUTPUT"

      - name: Fill in the ${{ matrix.service.name }} image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.download-task-def.outputs.file }}
          container-name: ${{ matrix.service.name }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ matrix.service.name }}

      - name: Deploy Amazon ECS ${{ matrix.service.name }} task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ matrix.service.ecs_service }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
