name: Build and deploy image to AWS ECS (Dev)

permissions:
    contents: read

jobs:
    build-and-deploy:
        name: Build and Deploy service images
        runs-on: ubuntu-latest
        environment: development
        steps:
        - name: Checkout
            uses: actions/checkout@v3

        - name: Check for Changes in user-service directory
            id: check-user-service-changes
            run: |
            if git diff --quiet HEAD^ -- backend/${{ inputs.USER_CONTAINER_NAME }}; then
                echo "No changes in user-service directory"
                echo "::set-output name=changes::false"
            else
                echo "Changes detected in user-service directory"
                echo "::set-output name=changes::true"
            fi
            shell: bash

        - name: Configure AWS credentials
            run: echo Configured AWS Credentials ${{ env.ECS_CLUSTER }} AWS_REGION ${{ env.AWS_REGION }}
            ECS_CLUSTER: ${{ env.ECS_CLUSTER }}
            # uses: aws-actions/configure-aws-credentials@v1
            # with:
            #   aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            #   aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            #   aws-region: ${{ inputs.AWS_REGION }}

        - name: Login to Amazon ECR
            run: Login to Amazon ECR
            # id: login-ecr
            # uses: aws-actions/amazon-ecr-login@v1  

    #   - name: Build, tag, and push ${{ env.USER_CONTAINER_NAME }} image to Amazon ECR
    #     if: steps.check-user-service-changes.outputs.changes == 'true'  
    #     uses: docker/build-push-action@v5
    #     with:
    #       context: backend/${{ env.USER_CONTAINER_NAME }}
    #       push: true
    #       tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.USER_CONTAINER_NAME }}
    #       build-args: |
    #         NODE_ENV=${{ vars.BUILD_ENV }}
    #         LOG_LEVEL=${{ vars.LOG_LEVEL }}
    #         CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}
    #         DATABASE_URL=${{ secrets.DATABASE_URL }}
    #         EMAIL_VERIFICATION_SECRET=${{ secrets.EMAIL_VERIFICATION_SECRET }}

    #   - name: Download user-service task definition
    #     id: download-user-service-task-def
    #     env:
    #       FAMILY: ${{ env.USER_CONTAINER_NAME }}
    #     run: |
    #       aws ecs describe-task-definition --task-definition $FAMILY --query taskDefinition > $FAMILY.json
    #       echo "file=$FAMILY.json" >> "$GITHUB_OUTPUT"

    #   - name: Fill in the user-service image ID in the Amazon ECS task definition
    #     id: user-service-task-def
    #     uses: aws-actions/amazon-ecs-render-task-definition@v1
    #     with:
    #       task-definition: ${{ steps.download-user-service-task-def.outputs.file }}
    #       container-name: ${{ env.USER_CONTAINER_NAME }}
    #       image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.USER_CONTAINER_NAME }}

    #   - name: Deploy Amazon ECS user-service task definition
    #     if: steps.check-user-service-changes.outputs.changes == 'true' 
    #     uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #     with:
    #       task-definition: ${{ steps.user-service-task-def.outputs.task-definition }}
    #       service: ${{ env.USER_CONTAINER_NAME }}
    #       cluster: ${{ env.ECS_CLUSTER }}
    #       wait-for-service-stability: true