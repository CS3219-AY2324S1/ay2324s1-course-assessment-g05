AWSTemplateFormatVersion: '2010-09-09'

Description: Peerprep AWS Cloudformation Stack v1.3

Parameters:
  EnvironmentName:
    Type: String
    Default: peerprep
    Description: "A friendly environment name that will be used for namespacing all cluster resources."
  PrivateDNSNamespaceName:
    Type: String
    Default: peerprep-services
    Description: "The private DNS name that identifies the name that you want to use to locate your resources"
  MinContainers:
    Type: Number
    Default: 1
    Description: "Minimum number of ECS tasks per ECS service"
  MaxContainers:
    Type: Number
    Default: 3
    Description: "Maximum number of ECS tasks per ECS service"
  AutoScalingTargetValue:
    Type: Number
    Default: 90
    Description: "Target CPU utilization (%) for ECS services auto scaling"

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "Generic"
        Parameters: 
          - EnvironmentName
          - PrivateDNSNamespaceName
      - 
        Label: 
          default: "ECS Service LB"
        Parameters: 
          - MinContainersECS
          - MaxContainersECS
          - AutoScalingTargetValueECS

Mappings:
  SubnetConfig:
    VPC:
      CIDR: '10.0.0.0/16'
    PublicOne:
      CIDR: '10.0.0.0/24'
    PublicTwo:
      CIDR: '10.0.1.0/24'
    PublicThree:
      CIDR: '10.0.2.0/24'
    PrivateOne:
      CIDR: '10.0.100.0/24'
    PrivateTwo:
      CIDR: '10.0.101.0/24'
    PrivateThree:
      CIDR: '10.0.102.0/24'

Resources:
  #=================================== 
  # VPC and networks
  #=================================== 
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']

  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']
      MapPublicIpOnLaunch: true
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicTwo', 'CIDR']
      MapPublicIpOnLaunch: true
  PublicSubnetThree:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicThree', 'CIDR']
      MapPublicIpOnLaunch: true

  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateOne', 'CIDR']
  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateTwo', 'CIDR']
  PrivateSubnetThree:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateThree', 'CIDR']

  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetThreeRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetThree
      RouteTableId: !Ref PublicRouteTable

  NatGatewayOneAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
        Domain: vpc
  NatGatewayTwoAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
        Domain: vpc
  NatGatewayThreeAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
        Domain: vpc
  NatGatewayOne:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayOneAttachment.AllocationId
      SubnetId: !Ref PublicSubnetOne
  NatGatewayTwo:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayTwoAttachment.AllocationId
      SubnetId: !Ref PublicSubnetTwo
  NatGatewayThree:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayThreeAttachment.AllocationId
      SubnetId: !Ref PublicSubnetThree
  PrivateRouteTableOne:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PrivateRouteOne:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayOne
  PrivateRouteTableOneAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      SubnetId: !Ref PrivateSubnetOne
  PrivateRouteTableTwo:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PrivateRouteTwo:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayTwo
  PrivateRouteTableTwoAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      SubnetId: !Ref PrivateSubnetTwo
  PrivateRouteTableThree:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PrivateRouteThree:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableThree
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayThree
  PrivateRouteTableThreeAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableThree
      SubnetId: !Ref PrivateSubnetThree

  #=================================== 
  # IAM Roles
  #=================================== 
  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref EnvironmentName, '-AutoScalingRole']]
      Description: Authorize to manage auto scaling resources
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'

  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref EnvironmentName, '-ECSRole']]
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'ec2:AttachNetworkInterface'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:CreateNetworkInterfacePermission'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteNetworkInterfacePermission'
              - 'ec2:Describe*'
              - 'ec2:DetachNetworkInterface'

              - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
              - 'elasticloadbalancing:DeregisterTargets'
              - 'elasticloadbalancing:Describe*'
              - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
              - 'elasticloadbalancing:RegisterTargets'
            Resource: '*'

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref EnvironmentName, '-ECSTaskExecutionRole']]
      Description: Authorize to execute tasks
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # Allow the ECS Tasks to download images from ECR
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'

                # Allow the ECS tasks to upload logs to CloudWatch
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref EnvironmentName, '-ECSTaskRole']]
      Description: Authorize to initialize task definition
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # Allow the ECS tasks to create log group to CloudWatch
                - 'logs:CreateLogGroup'
              Resource: '*'
  
  #=================================== 
  # ECS Cluster
  #=================================== 
  ECSDevCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join ['', [!Ref EnvironmentName, '-ECSDevCluster']]
  
  ECSProdCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join ['', [!Ref EnvironmentName, '-ECSProdCluster']]

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ['', [!Ref EnvironmentName, '-ContainerSecurityGroup']]
      GroupDescription: Access to the Fargate containers
      VpcId: !Ref 'VPC'

  ContainerSecurityGroupSelfIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: !Join [' ', [!Ref EnvironmentName, 'ContainerSecurityGroupSelfIngress']]
      GroupId: !Ref ContainerSecurityGroup
      SourceSecurityGroupId: !Ref ContainerSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80

  #=================================== 
  # ECS Namespaces and ServiceDiscovery
  #=================================== 
  PrivateDNSNamespace:
    Type: 'AWS::ServiceDiscovery::PrivateDnsNamespace'
    Properties:
      Vpc: !Ref VPC
      Name: !Ref PrivateDNSNamespaceName

  ServiceDiscoveryServiceQuestion:
    Type: 'AWS::ServiceDiscovery::Service'
    Properties:
      DnsConfig:
        DnsRecords:
          - Type: SRV
            TTL: 60
        NamespaceId: !Ref PrivateDNSNamespace
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: !Join ['', [!Ref EnvironmentName, '-ServiceDiscoveryServiceQuestion']]

  ServiceDiscoveryServiceMatching:
    Type: 'AWS::ServiceDiscovery::Service'
    Properties:
      DnsConfig:
        DnsRecords:
          - Type: SRV
            TTL: 60
        NamespaceId: !Ref PrivateDNSNamespace
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: !Join ['', [!Ref EnvironmentName, '-ServiceDiscoveryServiceMatching']]

  ServiceDiscoveryServiceUser:
    Type: 'AWS::ServiceDiscovery::Service'
    Properties:
      DnsConfig:
        DnsRecords:
          - Type: SRV
            TTL: 60
        NamespaceId: !Ref PrivateDNSNamespace
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: !Join ['', [!Ref EnvironmentName, '-ServiceDiscoveryServiceUser']]

  ServiceDiscoveryServiceAuth:
    Type: 'AWS::ServiceDiscovery::Service'
    Properties:
      DnsConfig:
        DnsRecords:
          - Type: SRV
            TTL: 60
        NamespaceId: !Ref PrivateDNSNamespace
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: !Join ['', [!Ref EnvironmentName, '-ServiceDiscoveryServiceAuth']]

  # ServiceDiscoveryServiceCollaboration:
  #   Type: 'AWS::ServiceDiscovery::Service'
  #   Properties:
  #     DnsConfig:
  #       DnsRecords:
  #         - Type: SRV
  #           TTL: 60
  #       NamespaceId: !Ref PrivateDNSNamespace
  #     HealthCheckCustomConfig:
  #       FailureThreshold: 1
  #     Name: !Join ['', [!Ref EnvironmentName, '-ServiceDiscoveryServiceCollaboration']]

  # ServiceDiscoveryServiceHistory:
  #   Type: 'AWS::ServiceDiscovery::Service'
  #   Properties:
  #     DnsConfig:
  #       DnsRecords:
  #         - Type: SRV
  #           TTL: 60
  #       NamespaceId: !Ref PrivateDNSNamespace
  #     HealthCheckCustomConfig:
  #       FailureThreshold: 1
  #     Name: !Join ['', [!Ref EnvironmentName, '-ServiceDiscoveryServiceHistory']]

  #=================================== 
  # ECS Services
  #=================================== 
  ServiceDevQuestion:
    Type: AWS::ECS::Service
    DependsOn:
      - PrivateRouteOne
      - PrivateRouteTwo
      - PrivateRouteThree
    Properties: 
      ServiceName: !Join ['', [!Ref EnvironmentName, '-ServiceDevQuestion']]
      Cluster: !Ref ECSDevCluster
      TaskDefinition: !Ref TaskDefinitionDevQuestion
      LaunchType: FARGATE
      DesiredCount: 1
      ServiceRegistries:
        - RegistryArn: !GetAtt ServiceDiscoveryServiceQuestion.Arn
          Port: 80
      NetworkConfiguration:
          AwsvpcConfiguration:
            AssignPublicIp: DISABLED
            Subnets:
              - !Ref PrivateSubnetOne
              - !Ref PrivateSubnetTwo
              - !Ref PrivateSubnetThree
            SecurityGroups:
              - !Ref ContainerSecurityGroup

  ServiceDevMatching: 
    Type: AWS::ECS::Service
    DependsOn:
      - PrivateRouteOne
      - PrivateRouteTwo
      - PrivateRouteThree
    Properties: 
      ServiceName: !Join ['', [!Ref EnvironmentName, '-ServiceDevMatching']]
      Cluster: !Ref ECSDevCluster
      TaskDefinition: !Ref TaskDefinitionDevMatching
      LaunchType: FARGATE
      DesiredCount: 1
      ServiceRegistries:
        - RegistryArn: !GetAtt ServiceDiscoveryServiceMatching.Arn
          Port: 80
      NetworkConfiguration:
          AwsvpcConfiguration:
            AssignPublicIp: DISABLED
            Subnets:
              - !Ref PrivateSubnetOne
              - !Ref PrivateSubnetTwo
              - !Ref PrivateSubnetThree
            SecurityGroups:
              - !Ref ContainerSecurityGroup
  
  ServiceDevUser: 
    Type: AWS::ECS::Service
    DependsOn:
      - PrivateRouteOne
      - PrivateRouteTwo
      - PrivateRouteThree
    Properties: 
      ServiceName: !Join ['', [!Ref EnvironmentName, '-ServiceDevUser']]
      Cluster: !Ref ECSDevCluster
      TaskDefinition: !Ref TaskDefinitionDevUser
      LaunchType: FARGATE
      DesiredCount: 1
      ServiceRegistries:
        - RegistryArn: !GetAtt ServiceDiscoveryServiceUser.Arn
          Port: 80
      NetworkConfiguration:
          AwsvpcConfiguration:
            AssignPublicIp: DISABLED
            Subnets:
              - !Ref PrivateSubnetOne
              - !Ref PrivateSubnetTwo
              - !Ref PrivateSubnetThree
            SecurityGroups:
              - !Ref ContainerSecurityGroup

  ServiceDevAuth: 
    Type: AWS::ECS::Service
    DependsOn:
      - PrivateRouteOne
      - PrivateRouteTwo
      - PrivateRouteThree
    Properties: 
      ServiceName: !Join ['', [!Ref EnvironmentName, '-ServiceDevAuth']]
      Cluster: !Ref ECSDevCluster
      TaskDefinition: !Ref TaskDefinitionDevAuth
      LaunchType: FARGATE
      DesiredCount: 1
      ServiceRegistries:
        - RegistryArn: !GetAtt ServiceDiscoveryServiceAuth.Arn
          Port: 80
      NetworkConfiguration:
          AwsvpcConfiguration:
            AssignPublicIp: DISABLED
            Subnets:
              - !Ref PrivateSubnetOne
              - !Ref PrivateSubnetTwo
              - !Ref PrivateSubnetThree
            SecurityGroups:
              - !Ref ContainerSecurityGroup

  # ServiceDevCollaboration: 
  #   Type: AWS::ECS::Service
  #   DependsOn:
  #     - PrivateRouteOne
  #     - PrivateRouteTwo
  #     - PrivateRouteThree
  #   Properties: 
  #     ServiceName: !Join ['', [!Ref EnvironmentName, '-ServiceDevCollaboration']]
  #     Cluster: !Ref ECSDevCluster
  #     TaskDefinition: !Ref TaskDefinitionDevCollaboration
  #     LaunchType: FARGATE
  #     DesiredCount: 1
  #     ServiceRegistries:
  #       - RegistryArn: !GetAtt ServiceDiscoveryServiceCollaboration.Arn
  #         Port: 80
  #     NetworkConfiguration:
  #         AwsvpcConfiguration:
  #           AssignPublicIp: DISABLED
  #           Subnets:
  #             - !Ref PrivateSubnetOne
  #             - !Ref PrivateSubnetTwo
  #             - !Ref PrivateSubnetThree
  #           SecurityGroups:
  #             - !Ref ContainerSecurityGroup

  # ServiceDevHistory: 
  #   Type: AWS::ECS::Service
  #   DependsOn:
  #     - PrivateRouteOne
  #     - PrivateRouteTwo
  #     - PrivateRouteThree
  #   Properties: 
  #     ServiceName: !Join ['', [!Ref EnvironmentName, '-ServiceDevHistory']]
  #     Cluster: !Ref ECSDevCluster
  #     TaskDefinition: !Ref TaskDefinitionDevHistory
  #     LaunchType: FARGATE
  #     DesiredCount: 1
  #     ServiceRegistries:
  #       - RegistryArn: !GetAtt ServiceDiscoveryServiceHistory.Arn
  #         Port: 80
  #     NetworkConfiguration:
  #         AwsvpcConfiguration:
  #           AssignPublicIp: DISABLED
  #           Subnets:
  #             - !Ref PrivateSubnetOne
  #             - !Ref PrivateSubnetTwo
  #             - !Ref PrivateSubnetThree
  #           SecurityGroups:
  #             - !Ref ContainerSecurityGroup

  ServiceProdQuestion:
    Type: AWS::ECS::Service
    DependsOn:
      - PrivateRouteOne
      - PrivateRouteTwo
      - PrivateRouteThree
    Properties: 
      ServiceName: !Join ['', [!Ref EnvironmentName, '-ServiceProdQuestion']]
      Cluster: !Ref ECSProdCluster
      TaskDefinition: !Ref TaskDefinitionProdQuestion
      LaunchType: FARGATE
      DesiredCount: 1
      ServiceRegistries:
        - RegistryArn: !GetAtt ServiceDiscoveryServiceQuestion.Arn
          Port: 80
      NetworkConfiguration:
          AwsvpcConfiguration:
            AssignPublicIp: DISABLED
            Subnets:
              - !Ref PrivateSubnetOne
              - !Ref PrivateSubnetTwo
              - !Ref PrivateSubnetThree
            SecurityGroups:
              - !Ref ContainerSecurityGroup

  ServiceProdMatching: 
    Type: AWS::ECS::Service
    DependsOn:
      - PrivateRouteOne
      - PrivateRouteTwo
      - PrivateRouteThree
    Properties: 
      ServiceName: !Join ['', [!Ref EnvironmentName, '-ServiceProdMatching']]
      Cluster: !Ref ECSProdCluster
      TaskDefinition: !Ref TaskDefinitionProdMatching
      LaunchType: FARGATE
      DesiredCount: 1
      ServiceRegistries:
        - RegistryArn: !GetAtt ServiceDiscoveryServiceMatching.Arn
          Port: 80
      NetworkConfiguration:
          AwsvpcConfiguration:
            AssignPublicIp: DISABLED
            Subnets:
              - !Ref PrivateSubnetOne
              - !Ref PrivateSubnetTwo
              - !Ref PrivateSubnetThree
            SecurityGroups:
              - !Ref ContainerSecurityGroup
  
  ServiceProdUser: 
    Type: AWS::ECS::Service
    DependsOn:
      - PrivateRouteOne
      - PrivateRouteTwo
      - PrivateRouteThree
    Properties: 
      ServiceName: !Join ['', [!Ref EnvironmentName, '-ServiceProdUser']]
      Cluster: !Ref ECSProdCluster
      TaskDefinition: !Ref TaskDefinitionProdUser
      LaunchType: FARGATE
      DesiredCount: 1
      ServiceRegistries:
        - RegistryArn: !GetAtt ServiceDiscoveryServiceUser.Arn
          Port: 80
      NetworkConfiguration:
          AwsvpcConfiguration:
            AssignPublicIp: DISABLED
            Subnets:
              - !Ref PrivateSubnetOne
              - !Ref PrivateSubnetTwo
              - !Ref PrivateSubnetThree
            SecurityGroups:
              - !Ref ContainerSecurityGroup

  ServiceProdAuth: 
    Type: AWS::ECS::Service
    DependsOn:
      - PrivateRouteOne
      - PrivateRouteTwo
      - PrivateRouteThree
    Properties: 
      ServiceName: !Join ['', [!Ref EnvironmentName, '-ServiceProdAuth']]
      Cluster: !Ref ECSProdCluster
      TaskDefinition: !Ref TaskDefinitionProdAuth
      LaunchType: FARGATE
      DesiredCount: 1
      ServiceRegistries:
        - RegistryArn: !GetAtt ServiceDiscoveryServiceAuth.Arn
          Port: 80
      NetworkConfiguration:
          AwsvpcConfiguration:
            AssignPublicIp: DISABLED
            Subnets:
              - !Ref PrivateSubnetOne
              - !Ref PrivateSubnetTwo
              - !Ref PrivateSubnetThree
            SecurityGroups:
              - !Ref ContainerSecurityGroup

  # ServiceProdCollaboration: 
  #   Type: AWS::ECS::Service
  #   DependsOn:
  #     - PrivateRouteOne
  #     - PrivateRouteTwo
  #     - PrivateRouteThree
  #   Properties: 
  #     ServiceName: !Join ['', [!Ref EnvironmentName, '-ServiceProdCollaboration']]
  #     Cluster: !Ref ECSProdCluster
  #     TaskDefinition: !Ref TaskDefinitionProdCollaboration
  #     LaunchType: FARGATE
  #     DesiredCount: 1
  #     ServiceRegistries:
  #       - RegistryArn: !GetAtt ServiceDiscoveryServiceCollaboration.Arn
  #         Port: 80
  #     NetworkConfiguration:
  #         AwsvpcConfiguration:
  #           AssignPublicIp: DISABLED
  #           Subnets:
  #             - !Ref PrivateSubnetOne
  #             - !Ref PrivateSubnetTwo
  #             - !Ref PrivateSubnetThree
  #           SecurityGroups:
  #             - !Ref ContainerSecurityGroup

  # ServiceProdHistory: 
  #   Type: AWS::ECS::Service
  #   DependsOn:
  #     - PrivateRouteOne
  #     - PrivateRouteTwo
  #     - PrivateRouteThree
  #   Properties: 
  #     ServiceName: !Join ['', [!Ref EnvironmentName, '-ServiceProdHistory']]
  #     Cluster: !Ref ECSProdCluster
  #     TaskDefinition: !Ref TaskDefinitionProdHistory
  #     LaunchType: FARGATE
  #     DesiredCount: 1
  #     ServiceRegistries:
  #       - RegistryArn: !GetAtt ServiceDiscoveryServiceHistory.Arn
  #         Port: 80
  #     NetworkConfiguration:
  #         AwsvpcConfiguration:
  #           AssignPublicIp: DISABLED
  #           Subnets:
  #             - !Ref PrivateSubnetOne
  #             - !Ref PrivateSubnetTwo
  #             - !Ref PrivateSubnetThree
  #           SecurityGroups:
  #             - !Ref ContainerSecurityGroup

  #=================================== 
  # ECS Task definitions
  #=================================== 
  TaskDefinitionDevQuestion:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: !Join ['', [!Ref EnvironmentName, '-TaskDefinitionDevQuestion']]
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
          - Name: 'question-service'
            Image: !Join ['', [!GetAtt ECRContainerDevRepo.RepositoryUri, ':question-service']]
            Essential: true
            PortMappings:
              - ContainerPort: 80
                Protocol: tcp
            Environment:
              - Name: SERVICE_PORT
                Value: 80
              - Name: GATEWAY
                Value: !Sub 'https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com'
            LogConfiguration: 
              LogDriver: awslogs
              Options:
                awslogs-create-group: true
                awslogs-group: !Join ["", [!Ref EnvironmentName, '-dev-question-service']]
                awslogs-region: !Ref AWS::Region
                awslogs-stream-prefix: ecs
      NetworkMode: awsvpc
      Memory: '512'
      Cpu: '256'

  TaskDefinitionDevMatching:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: !Join ['', [!Ref EnvironmentName, '-TaskDefinitionDevMatching']]
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
          - Name: 'matching-service'
            Image: !Join ['', [!GetAtt ECRContainerDevRepo.RepositoryUri, ':matching-service']]
            Essential: true
            PortMappings:
              - ContainerPort: 80
                Protocol: tcp
            Environment:
              - Name: SERVICE_PORT
                Value: 80
              - Name: GATEWAY
                Value: !Sub 'https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com'
            LogConfiguration: 
              LogDriver: awslogs
              Options:
                awslogs-create-group: true
                awslogs-group: !Join ["", [!Ref EnvironmentName, '-dev-matching-service']]
                awslogs-region: !Ref AWS::Region
                awslogs-stream-prefix: ecs
      NetworkMode: awsvpc
      Memory: '512'
      Cpu: '256'

  TaskDefinitionDevUser:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: !Join ['', [!Ref EnvironmentName, '-TaskDefinitionDevUser']]
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
          - Name: 'user-service'
            Image: !Join ['', [!GetAtt ECRContainerDevRepo.RepositoryUri, ':user-service']]
            Essential: true
            PortMappings:
              - ContainerPort: 80
                Protocol: tcp
            Environment:
              - Name: SERVICE_PORT
                Value: 80
              - Name: GATEWAY
                Value: !Sub 'https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com'
            LogConfiguration: 
              LogDriver: awslogs
              Options:
                awslogs-create-group: true
                awslogs-group: !Join ["", [!Ref EnvironmentName, '-dev-user-service']]
                awslogs-region: !Ref AWS::Region
                awslogs-stream-prefix: ecs
      NetworkMode: awsvpc
      Memory: '512'
      Cpu: '256'

  TaskDefinitionDevAuth:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: !Join ['', [!Ref EnvironmentName, '-TaskDefinitionDevAuth']]
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
          - Name: 'auth-service'
            Image: !Join ['', [!GetAtt ECRContainerDevRepo.RepositoryUri, ':auth-service']]
            Essential: true
            PortMappings:
              - ContainerPort: 80
                Protocol: tcp
            Environment:
              - Name: SERVICE_PORT
                Value: 80
              - Name: GATEWAY
                Value: !Sub 'https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com'
            LogConfiguration: 
              LogDriver: awslogs
              Options:
                awslogs-create-group: true
                awslogs-group: !Join ["", [!Ref EnvironmentName, '-dev-auth-service']]
                awslogs-region: !Ref AWS::Region
                awslogs-stream-prefix: ecs
      NetworkMode: awsvpc
      Memory: '512'
      Cpu: '256'

  # TaskDefinitionDevCollaboration:
  #   Type: 'AWS::ECS::TaskDefinition'
  #   Properties:
  #     Family: !Join ['', [!Ref EnvironmentName, '-TaskDefinitionDevCollaboration']]
  #     TaskRoleArn: !GetAtt ECSTaskRole.Arn
  #     ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
  #     RequiresCompatibilities:
  #       - FARGATE
  #     ContainerDefinitions:
  #         - Name: 'collaboration-service'
  #           Image: !Join ['', [!GetAtt ECRContainerDevRepo.RepositoryUri, ':collaboration-service']]
  #           Essential: true
  #           PortMappings:
  #             - ContainerPort: 80
  #               Protocol: tcp
  #           Environment:
  #             - Name: SERVICE_PORT
  #               Value: 80
  #           LogConfiguration: 
  #             LogDriver: awslogs
  #             Options:
  #               awslogs-create-group: true
  #               awslogs-group: !Join ["", [!Ref EnvironmentName, '-dev-collaboration-service']]
  #               awslogs-region: !Ref AWS::Region
  #               awslogs-stream-prefix: ecs
  #     NetworkMode: awsvpc
  #     Memory: '512'
  #     Cpu: '256'

  # TaskDefinitionDevHistory:
  #   Type: 'AWS::ECS::TaskDefinition'
  #   Properties:
  #     Family: !Join ['', [!Ref EnvironmentName, '-TaskDefinitionDevHistory']]
  #     TaskRoleArn: !GetAtt ECSTaskRole.Arn
  #     ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
  #     RequiresCompatibilities:
  #       - FARGATE
  #     ContainerDefinitions:
  #         - Name: 'history-service'
  #           Image: !Join ['', [!GetAtt ECRContainerDevRepo.RepositoryUri, ':history-service']]
  #           Essential: true
  #           PortMappings:
  #             - ContainerPort: 80
  #               Protocol: tcp
  #           Environment:
  #             - Name: SERVICE_PORT
  #               Value: 80
  #           LogConfiguration: 
  #             LogDriver: awslogs
  #             Options:
  #               awslogs-create-group: true
  #               awslogs-group: !Join ["", [!Ref EnvironmentName, '-dev-history-service']]
  #               awslogs-region: !Ref AWS::Region
  #               awslogs-stream-prefix: ecs
  #     NetworkMode: awsvpc
  #     Memory: '512'
  #     Cpu: '256'

  TaskDefinitionProdQuestion:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: !Join ['', [!Ref EnvironmentName, '-TaskDefinitionProdQuestion']]
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
          - Name: 'question-service'
            Image: !Join ['', [!GetAtt ECRContainerProdRepo.RepositoryUri, ':question-service']]
            Essential: true
            PortMappings:
              - ContainerPort: 80
                Protocol: tcp
            Environment:
              - Name: SERVICE_PORT
                Value: 80
              - Name: GATEWAY
                Value: !Sub 'https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com'
            LogConfiguration: 
              LogDriver: awslogs
              Options:
                awslogs-create-group: true
                awslogs-group: !Join ["", [!Ref EnvironmentName, '-prod-question-service']]
                awslogs-region: !Ref AWS::Region
                awslogs-stream-prefix: ecs
      NetworkMode: awsvpc
      Memory: '512'
      Cpu: '256'

  TaskDefinitionProdMatching:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: !Join ['', [!Ref EnvironmentName, '-TaskDefinitionProdMatching']]
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
          - Name: 'matching-service'
            Image: !Join ['', [!GetAtt ECRContainerProdRepo.RepositoryUri, ':matching-service']]
            Essential: true
            PortMappings:
              - ContainerPort: 80
                Protocol: tcp
            Environment:
              - Name: SERVICE_PORT
                Value: 80
              - Name: GATEWAY
                Value: !Sub 'https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com'
            LogConfiguration: 
              LogDriver: awslogs
              Options:
                awslogs-create-group: true
                awslogs-group: !Join ["", [!Ref EnvironmentName, '-prod-matching-service']]
                awslogs-region: !Ref AWS::Region
                awslogs-stream-prefix: ecs
      NetworkMode: awsvpc
      Memory: '512'
      Cpu: '256'

  TaskDefinitionProdUser:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: !Join ['', [!Ref EnvironmentName, '-TaskDefinitionProdUser']]
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
          - Name: 'user-service'
            Image: !Join ['', [!GetAtt ECRContainerProdRepo.RepositoryUri, ':user-service']]
            Essential: true
            PortMappings:
              - ContainerPort: 80
                Protocol: tcp
            Environment:
              - Name: SERVICE_PORT
                Value: 80
              - Name: GATEWAY
                Value: !Sub 'https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com'
            LogConfiguration: 
              LogDriver: awslogs
              Options:
                awslogs-create-group: true
                awslogs-group: !Join ["", [!Ref EnvironmentName, '-prod-user-service']]
                awslogs-region: !Ref AWS::Region
                awslogs-stream-prefix: ecs
      NetworkMode: awsvpc
      Memory: '512'
      Cpu: '256'

  TaskDefinitionProdAuth:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: !Join ['', [!Ref EnvironmentName, '-TaskDefinitionProdAuth']]
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
          - Name: 'auth-service'
            Image: !Join ['', [!GetAtt ECRContainerProdRepo.RepositoryUri, ':auth-service']]
            Essential: true
            PortMappings:
              - ContainerPort: 80
                Protocol: tcp
            Environment:
              - Name: SERVICE_PORT
                Value: 80
              - Name: GATEWAY
                Value: !Sub 'https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com'
            LogConfiguration: 
              LogDriver: awslogs
              Options:
                awslogs-create-group: true
                awslogs-group: !Join ["", [!Ref EnvironmentName, '-prod-auth-service']]
                awslogs-region: !Ref AWS::Region
                awslogs-stream-prefix: ecs
      NetworkMode: awsvpc
      Memory: '512'
      Cpu: '256'

  # TaskDefinitionProdCollaboration:
  #   Type: 'AWS::ECS::TaskDefinition'
  #   Properties:
  #     Family: !Join ['', [!Ref EnvironmentName, '-TaskDefinitionProdCollaboration']]
  #     TaskRoleArn: !GetAtt ECSTaskRole.Arn
  #     ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
  #     RequiresCompatibilities:
  #       - FARGATE
  #     ContainerDefinitions:
  #         - Name: 'collaboration-service'
  #           Image: !Join ['', [!GetAtt ECRContainerProdRepo.RepositoryUri, ':collaboration-service']]
  #           Essential: true
  #           PortMappings:
  #             - ContainerPort: 80
  #               Protocol: tcp
  #           Environment:
  #             - Name: SERVICE_PORT
  #               Value: 80
  #           LogConfiguration: 
  #             LogDriver: awslogs
  #             Options:
  #               awslogs-create-group: true
  #               awslogs-group: !Join ["", [!Ref EnvironmentName, '-prod-collaboration-service']]
  #               awslogs-region: !Ref AWS::Region
  #               awslogs-stream-prefix: ecs
  #     NetworkMode: awsvpc
  #     Memory: '512'
  #     Cpu: '256'

  # TaskDefinitionProdHistory:
  #   Type: 'AWS::ECS::TaskDefinition'
  #   Properties:
  #     Family: !Join ['', [!Ref EnvironmentName, '-TaskDefinitionProdHistory']]
  #     TaskRoleArn: !GetAtt ECSTaskRole.Arn
  #     ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
  #     RequiresCompatibilities:
  #       - FARGATE
  #     ContainerDefinitions:
  #         - Name: 'history-service'
  #           Image: !Join ['', [!GetAtt ECRContainerProdRepo.RepositoryUri, ':history-service']]
  #           Essential: true
  #           PortMappings:
  #             - ContainerPort: 80
  #               Protocol: tcp
  #           Environment:
  #             - Name: SERVICE_PORT
  #               Value: 80
  #           LogConfiguration: 
  #             LogDriver: awslogs
  #             Options:
  #               awslogs-create-group: true
  #               awslogs-group: !Join ["", [!Ref EnvironmentName, '-prod-history-service']]
  #               awslogs-region: !Ref AWS::Region
  #               awslogs-stream-prefix: ecs
  #     NetworkMode: awsvpc
  #     Memory: '512'
  #     Cpu: '256'

  #=================================== 
  # ECR Image Repo
  #=================================== 
  ECRContainerDevRepo:
    Type: "AWS::ECR::Repository"
    Properties:
        RepositoryName: !Join ['', [!Ref EnvironmentName, '-ecr-container-dev-repo']]
        EmptyOnDelete: true
        LifecyclePolicy:
            LifecyclePolicyText: "{\"rules\":[{\"rulePriority\":1,\"description\":\"remove old images\",\"selection\":{\"tagStatus\":\"untagged\",\"countType\":\"imageCountMoreThan\",\"countNumber\":5},\"action\":{\"type\":\"expire\"}}]}"

  ECRContainerProdRepo:
    Type: "AWS::ECR::Repository"
    Properties:
        RepositoryName: !Join ['', [!Ref EnvironmentName, '-ecr-container-prod-repo']]
        EmptyOnDelete: true
        LifecyclePolicy:
            LifecyclePolicyText: "{\"rules\":[{\"rulePriority\":1,\"description\":\"remove old images\",\"selection\":{\"tagStatus\":\"untagged\",\"countType\":\"imageCountMoreThan\",\"countNumber\":5},\"action\":{\"type\":\"expire\"}}]}"

  #=================================== 
  # ECS Autoscaling
  #=================================== 
  AutoScalingTargetDevQuestion:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref MinContainers
      MaxCapacity: !Ref MaxContainers
      ResourceId: !Join ['/', [service, !Ref ECSDevCluster, !GetAtt ServiceDevQuestion.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt AutoScalingRole.Arn

  AutoScalingTargetDevMatching:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref MinContainers
      MaxCapacity: !Ref MaxContainers
      ResourceId: !Join ['/', [service, !Ref ECSDevCluster, !GetAtt ServiceDevMatching.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt AutoScalingRole.Arn

  AutoScalingTargetDevAuth:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref MinContainers
      MaxCapacity: !Ref MaxContainers
      ResourceId: !Join ['/', [service, !Ref ECSDevCluster, !GetAtt ServiceDevAuth.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt AutoScalingRole.Arn

  AutoScalingTargetDevUser:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref MinContainers
      MaxCapacity: !Ref MaxContainers
      ResourceId: !Join ['/', [service, !Ref ECSDevCluster, !GetAtt ServiceDevUser.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt AutoScalingRole.Arn

  AutoScalingPolicyDevQuestion:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ['', [!GetAtt ServiceDevQuestion.Name, '-AutoScalingPolicy']]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTargetDevQuestion
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: !Ref AutoScalingTargetValue

  AutoScalingPolicyDevMatching:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ['', [!GetAtt ServiceDevMatching.Name, '-AutoScalingPolicy']]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTargetDevMatching
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: !Ref AutoScalingTargetValue

  AutoScalingPolicyDevAuth:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ['', [!GetAtt ServiceDevAuth.Name, '-AutoScalingPolicy']]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTargetDevAuth
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: !Ref AutoScalingTargetValue
  
  AutoScalingPolicyDevUser:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ['', [!GetAtt ServiceDevUser.Name, '-AutoScalingPolicy']]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTargetDevUser
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: !Ref AutoScalingTargetValue

  AutoScalingTargetProdQuestion:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref MinContainers
      MaxCapacity: !Ref MaxContainers
      ResourceId: !Join ['/', [service, !Ref ECSDevCluster, !GetAtt ServiceDevQuestion.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt AutoScalingRole.Arn

  AutoScalingTargetProdMatching:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref MinContainers
      MaxCapacity: !Ref MaxContainers
      ResourceId: !Join ['/', [service, !Ref ECSDevCluster, !GetAtt ServiceDevMatching.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt AutoScalingRole.Arn

  AutoScalingTargetProdAuth:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref MinContainers
      MaxCapacity: !Ref MaxContainers
      ResourceId: !Join ['/', [service, !Ref ECSDevCluster, !GetAtt ServiceDevAuth.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt AutoScalingRole.Arn

  AutoScalingTargetProdUser:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref MinContainers
      MaxCapacity: !Ref MaxContainers
      ResourceId: !Join ['/', [service, !Ref ECSDevCluster, !GetAtt ServiceDevUser.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt AutoScalingRole.Arn

  AutoScalingPolicyProdQuestion:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ['', [!GetAtt ServiceDevQuestion.Name, '-AutoScalingPolicy']]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTargetProdQuestion
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: !Ref AutoScalingTargetValue

  AutoScalingPolicyProdMatching:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ['', [!GetAtt ServiceDevMatching.Name, '-AutoScalingPolicy']]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTargetProdMatching
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: !Ref AutoScalingTargetValue

  AutoScalingPolicyProdAuth:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ['', [!GetAtt ServiceDevAuth.Name, '-AutoScalingPolicy']]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTargetProdAuth
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: !Ref AutoScalingTargetValue
  
  AutoScalingPolicyProdUser:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ['', [!GetAtt ServiceDevUser.Name, '-AutoScalingPolicy']]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTargetProdUser
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: !Ref AutoScalingTargetValue


  #=================================== 
  # Cognito 
  #=================================== 
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
  
  UserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      SupportedIdentityProviders:
        - COGNITO
      PreventUserExistenceErrors: ENABLED

  #=================================== 
  # API Gateway 
  #=================================== 
  HttpApi:
    Type: "AWS::ApiGatewayV2::Api"
    Properties:
      Name: !Join ['', [!Ref EnvironmentName, '-HttpApi']]
      ProtocolType: "HTTP"
      RouteSelectionExpression: "$request.method $request.path"
      CorsConfiguration: 
        AllowHeaders: 
        - "*"
        AllowMethods: 
        - "PUT"
        - "GET"
        - "POST"
        - "DELETE"
        AllowOrigins: 
        - "https://master.d2wfcislijzove.amplifyapp.com"
        - "https://development.d2wfcislijzove.amplifyapp.com"
        - "https://production.d2wfcislijzove.amplifyapp.com/"
        - "http://localhost:3000"
      DisableExecuteApiEndpoint: false

  # Route for Question
  RouteQuestionApiHealth:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref HttpApi
      ApiKeyRequired: false
      AuthorizationType: "NONE"
      RequestParameters: {}
      RouteKey: "GET /question/api/health"
      Target: !Sub "integrations/${IntegrationQuestion}"
  RouteQuestionApiTopics:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref HttpApi
      ApiKeyRequired: false
      AuthorizationType: "NONE"
      RequestParameters: {}
      RouteKey: "GET /question/api/topics"
      Target: !Sub "integrations/${IntegrationQuestion}"
  RouteQuestionApiQuestions:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref HttpApi
      ApiKeyRequired: false
      AuthorizationType: "NONE"
      RequestParameters: {}
      RouteKey: "GET /question/api/questions"
      Target: !Sub "integrations/${IntegrationQuestion}"
  RouteQuestionApiQuestionById:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref HttpApi
      ApiKeyRequired: false
      AuthorizationType: "NONE"
      RequestParameters: {}
      RouteKey: "GET /question/api/questions/{questionId}"
      Target: !Sub "integrations/${IntegrationQuestion}"
  RouteQuestionApiPostQuestion:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref HttpApi
      ApiKeyRequired: false
      AuthorizationType: "NONE"
      RequestParameters: {}
      RouteKey: "POST /question/api/questions"
      Target: !Sub "integrations/${IntegrationQuestion}"
  RouteQuestionApiUpdateQuestion:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref HttpApi
      ApiKeyRequired: false
      AuthorizationType: "NONE"
      RequestParameters: {}
      RouteKey: "PUT /question/api/questions/{questionId}"
      Target: !Sub "integrations/${IntegrationQuestion}"
  RouteQuestionApiDeleteQuestion:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref HttpApi
      ApiKeyRequired: false
      AuthorizationType: "NONE"
      RequestParameters: {}
      RouteKey: "DELETE /question/api/questions/{questionId}"
      Target: !Sub "integrations/${IntegrationQuestion}"

  # Route for matching
  RouteMatchingSocket:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref HttpApi
      ApiKeyRequired: false
      AuthorizationType: "NONE"
      RequestParameters: {}
      RouteKey: "ANY /matching/socket/{proxy}"
      Target: !Sub "integrations/${IntegrationMatching}"
  RouteMatchingApiStatus:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref HttpApi
      ApiKeyRequired: false
      AuthorizationType: "NONE"
      RequestParameters: {}
      RouteKey: "GET /matching/api/status"
      Target: !Sub "integrations/${IntegrationMatching}"
  RouteMatchingApiHealth:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref HttpApi
      ApiKeyRequired: false
      AuthorizationType: "NONE"
      RequestParameters: {}
      RouteKey: "GET /matching/api/health"
      Target: !Sub "integrations/${IntegrationMatching}"

  # Route for Auth 
  RouteAuthApiHealth:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref HttpApi
      ApiKeyRequired: false
      AuthorizationType: "NONE"
      RequestParameters: {}
      RouteKey: "GET /auth/api/health"
      Target: !Sub "integrations/${IntegrationAuth}"
  RouteAuthApiRegisterByEmail:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: "POST /auth/api/registerByEmail"
      Target: !Sub "integrations/${IntegrationAuth}"
  RouteAuthApiLoginByEmail:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: "POST /auth/api/loginByEmail"
      Target: !Sub "integrations/${IntegrationAuth}"
  RouteAuthApiValidate:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: "POST /auth/api/validate"
      Target: !Sub "integrations/${IntegrationAuth}"
  RouteAuthApiValidateAdmin:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: "POST /auth/api/validateAdmin"
      Target: !Sub "integrations/${IntegrationAuth}"
  RouteAuthApiLogout:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: "POST /auth/api/logout"
      Target: !Sub "integrations/${IntegrationAuth}"
  RouteAuthApiVerifyEmail:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: "PUT /auth/api/verifyEmail/{email}/{token}"
      Target: !Sub "integrations/${IntegrationAuth}"
  RouteAuthApiSendPasswordResetEmail:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: "PUT /auth/api/sendPasswordResetEmail/{email}"
      Target: !Sub "integrations/${IntegrationAuth}"
  RouteAuthApiChangePassword:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: "PUT /auth/api/changePassword/{id}"
      Target: !Sub "integrations/${IntegrationAuth}"


  # Route for User 
  RouteUserApiHealth:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref HttpApi
      ApiKeyRequired: false
      AuthorizationType: "NONE"
      RequestParameters: {}
      RouteKey: "GET /user/api/health"
      Target: !Sub "integrations/${IntegrationUser}"
  RouteUserApiEmail:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref HttpApi
      ApiKeyRequired: false
      AuthorizationType: "NONE"
      RequestParameters: {}
      RouteKey: "GET /user/api/users/email"
      Target: !Sub "integrations/${IntegrationUser}"
  RouteUserApiUserById:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref HttpApi
      ApiKeyRequired: false
      AuthorizationType: "NONE"
      RequestParameters: {}
      RouteKey: "GET /user/api/users/{userId}"
      Target: !Sub "integrations/${IntegrationUser}"
  RouteUserApiUserPreferences:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref HttpApi
      ApiKeyRequired: false
      AuthorizationType: "NONE"
      RequestParameters: {}
      RouteKey: "GET /user/api/users/{userId}/preferences"
      Target: !Sub "integrations/${IntegrationUser}"
  RouteUserApiUpdateUserPreferences:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref HttpApi
      ApiKeyRequired: false
      AuthorizationType: "NONE"
      RequestParameters: {}
      RouteKey: "PUT /user/api/users/{userId}/preferences"
      Target: !Sub "integrations/${IntegrationUser}"
  RouteUserApiPostUser:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref HttpApi
      ApiKeyRequired: false
      AuthorizationType: "NONE"
      RequestParameters: {}
      RouteKey: "POST /user/api/users"
      Target: !Sub "integrations/${IntegrationUser}"
  RouteUserApiUpdateUserById:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref HttpApi
      ApiKeyRequired: false
      AuthorizationType: "NONE"
      RequestParameters: {}
      RouteKey: "PUT /user/api/users/{userId}"
      Target: !Sub "integrations/${IntegrationUser}"
  RouteUserApiUpdateVerification:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref HttpApi
      ApiKeyRequired: false
      AuthorizationType: "NONE"
      RequestParameters: {}
      RouteKey: "PUT /user/api/users/updateVerification/{email}"
      Target: !Sub "integrations/${IntegrationUser}"
  RouteUserApiUpdatePasswordResetToken:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref HttpApi
      ApiKeyRequired: false
      AuthorizationType: "NONE"
      RequestParameters: {}
      RouteKey: "PUT /user/api/users/updatePasswordResetToken/{email}"
      Target: !Sub "integrations/${IntegrationUser}"
  RouteUserApiDeleteUserById:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref HttpApi
      ApiKeyRequired: false
      AuthorizationType: "NONE"
      RequestParameters: {}
      RouteKey: "DELETE /user/api/users/{userId}"
      Target: !Sub "integrations/${IntegrationUser}"

  IntegrationQuestion:
    Type: "AWS::ApiGatewayV2::Integration"
    Properties:
      ApiId: !Ref HttpApi
      Description: !Join ['', [!Ref EnvironmentName, '-IntegrationQuestion']] 
      ConnectionType: "VPC_LINK"
      ConnectionId: !Ref HttpApiVPCLink
      IntegrationMethod: "ANY"
      IntegrationType: "HTTP_PROXY"
      IntegrationUri: !GetAtt ServiceDiscoveryServiceQuestion.Arn
      PayloadFormatVersion: '1.0'
  IntegrationMatching:
    Type: "AWS::ApiGatewayV2::Integration"
    Properties:
      ApiId: !Ref HttpApi
      Description: !Join ['', [!Ref EnvironmentName, '-IntegrationMatching']] 
      ConnectionType: "VPC_LINK"
      ConnectionId: !Ref HttpApiVPCLink
      IntegrationMethod: "ANY"
      IntegrationType: "HTTP_PROXY"
      IntegrationUri: !GetAtt ServiceDiscoveryServiceMatching.Arn
      PayloadFormatVersion: '1.0'
  IntegrationAuth:
    Type: "AWS::ApiGatewayV2::Integration"
    Properties:
      ApiId: !Ref HttpApi
      Description: !Join ['', [!Ref EnvironmentName, '-IntegrationAuth']] 
      ConnectionType: "VPC_LINK"
      ConnectionId: !Ref HttpApiVPCLink
      IntegrationMethod: "ANY"
      IntegrationType: "HTTP_PROXY"
      IntegrationUri: !GetAtt ServiceDiscoveryServiceAuth.Arn
      PayloadFormatVersion: '1.0'
  IntegrationUser:
    Type: "AWS::ApiGatewayV2::Integration"
    Properties:
      ApiId: !Ref HttpApi
      Description: !Join ['', [!Ref EnvironmentName, '-IntegrationUser']] 
      ConnectionType: "VPC_LINK"
      ConnectionId: !Ref HttpApiVPCLink
      IntegrationMethod: "ANY"
      IntegrationType: "HTTP_PROXY"
      IntegrationUri: !GetAtt ServiceDiscoveryServiceUser.Arn
      PayloadFormatVersion: '1.0'

  HttpApiProductionStage:
    Type: 'AWS::ApiGatewayV2::Stage'
    Properties:
      StageName: 'production'
      ApiId: !Ref 'HttpApi'
      AutoDeploy: false
  HttpApiDevelopmentStage:
    Type: 'AWS::ApiGatewayV2::Stage'
    Properties:
      StageName: 'development'
      ApiId: !Ref 'HttpApi'
      AutoDeploy: true   

  HttpApiVPCLink:
    Type: AWS::ApiGatewayV2::VpcLink
    Properties: 
      Name: !Join ['', [!Ref EnvironmentName, '-vpclink']] 
      SecurityGroupIds: 
        - !Ref ContainerSecurityGroup
      SubnetIds: 
        - !Ref PrivateSubnetOne
        - !Ref PrivateSubnetTwo
        - !Ref PrivateSubnetThree

Outputs:
  # APITestPage:
  #   Description: The URL of the sample web app client, used to test the sample API
  #   Value: !Join
  #     - ''
  #     - - "https://master.d2wfcislijzove.amplifyapp.com/?stackregion="
  #       - !Ref 'AWS::Region'
  #       - "&stackhttpapi="
  #       - !Ref 'HttpApi'
  #       - "&stackuserpool="
  #       - !Ref 'UserPool'
  #       - "&stackuserpoolclient="
  #       - !Ref 'UserPoolClient'
  APIInvokeURL:
    Description: Invoke URL for the HTTP API
    Value: !Sub 'https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com'
  APIId:
    Description: The ID of the HTTP API
    Value: !Ref 'HttpApi'
  ECSContainerRepo:
    Description: The name of the ECR repo
    Value: !Ref 'ECRContainerDevRepo'
  ECSDevClusterName:
    Description: The name of the ECS cluster
    Value: !Ref 'ECSDevCluster'
  ECSProdClusterName:
    Description: The name of the ECS cluster
    Value: !Ref 'ECSProdCluster'
  VpcId:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref 'VPC'
  ContainerSecurityGroup:
    Description: A security group used to allow Fargate containers to receive traffic
    Value: !Ref 'ContainerSecurityGroup'
  PrivateDNSNamespace:
    Description: The ID of the private DNS namespace.
    Value: !Ref 'PrivateDNSNamespace' 