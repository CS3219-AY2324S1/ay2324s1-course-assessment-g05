AWSTemplateFormatVersion: '2010-09-09'

Description: AWS Fargate cluster hosting APIs exposed through API Gateway.

Parameters:
  EnvironmentName:
    Type: String
    Default: peerprep
    Description: "A friendly environment name that will be used for namespacing all cluster resources. Example: staging, qa, or production"
  PrivateDNSNamespaceName:
    Type: String
    Default: service
    Description: "The private DNS name that identifies the name that you want to use to locate your resources"
  MinContainersQuestion:
    Type: Number
    Default: 1
    Description: "Minimum number of ECS tasks per ECS service"
  MaxContainersQuestion:
    Type: Number
    Default: 3
    Description: "Maximum number of ECS tasks per ECS service"
  AutoScalingTargetValueQuestion:
    Type: Number
    Default: 90
    Description: "Target CPU utilizatio (%) for ECS services auto scaling"
  MinContainersMatching:
    Type: Number
    Default: 1
    Description: "Minimum number of ECS tasks per ECS service"
  MaxContainersMatching:
    Type: Number
    Default: 3
    Description: "Maximum number of ECS tasks per ECS service"
  AutoScalingTargetValueMatching:
    Type: Number
    Default: 90
    Description: "Target CPU utilizatio (%) for ECS services auto scaling"

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "Generic"
        Parameters: 
          - EnvironmentName
          - PrivateDNSNamespaceName
      - 
        Label: 
          default: "question-service Service"
        Parameters: 
          - MinContainersQuestion
          - MaxContainersQuestion
          - AutoScalingTargetValueQuestion
      - 
        Label: 
          default: "Matching Service"
        Parameters: 
          - MinContainersMatching
          - MaxContainersMatching
          - AutoScalingTargetValueMatching

Mappings:
  SubnetConfig:
    VPC:
      CIDR: '10.0.0.0/16'
    PublicOne:
      CIDR: '10.0.0.0/24'
    PublicTwo:
      CIDR: '10.0.1.0/24'
    PublicThree:
      CIDR: '10.0.2.0/24'
    PrivateOne:
      CIDR: '10.0.100.0/24'
    PrivateTwo:
      CIDR: '10.0.101.0/24'
    PrivateThree:
      CIDR: '10.0.102.0/24'

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']

  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']
      MapPublicIpOnLaunch: true
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicTwo', 'CIDR']
      MapPublicIpOnLaunch: true
  PublicSubnetThree:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicThree', 'CIDR']
      MapPublicIpOnLaunch: true

  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateOne', 'CIDR']
  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateTwo', 'CIDR']
  PrivateSubnetThree:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateThree', 'CIDR']

  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetThreeRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetThree
      RouteTableId: !Ref PublicRouteTable

  NatGatewayOneAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
        Domain: vpc
  NatGatewayTwoAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
        Domain: vpc
  NatGatewayThreeAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
        Domain: vpc
  NatGatewayOne:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayOneAttachment.AllocationId
      SubnetId: !Ref PublicSubnetOne
  NatGatewayTwo:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayTwoAttachment.AllocationId
      SubnetId: !Ref PublicSubnetTwo
  NatGatewayThree:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayThreeAttachment.AllocationId
      SubnetId: !Ref PublicSubnetThree
  PrivateRouteTableOne:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PrivateRouteOne:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayOne
  PrivateRouteTableOneAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      SubnetId: !Ref PrivateSubnetOne
  PrivateRouteTableTwo:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PrivateRouteTwo:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayTwo
  PrivateRouteTableTwoAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      SubnetId: !Ref PrivateSubnetTwo
  PrivateRouteTableThree:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PrivateRouteThree:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableThree
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayThree
  PrivateRouteTableThreeAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableThree
      SubnetId: !Ref PrivateSubnetThree

  PeerprepECSCluster:
    Type: AWS::ECS::Cluster

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the Fargate containers
      VpcId: !Ref 'VPC'

  ContainerSecurityGroupSelfIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ContainerSecurityGroup
      SourceSecurityGroupId: !Ref ContainerSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80

  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'

  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'ec2:AttachNetworkInterface'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:CreateNetworkInterfacePermission'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteNetworkInterfacePermission'
              - 'ec2:Describe*'
              - 'ec2:DetachNetworkInterface'

              - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
              - 'elasticloadbalancing:DeregisterTargets'
              - 'elasticloadbalancing:Describe*'
              - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
              - 'elasticloadbalancing:RegisterTargets'
            Resource: '*'

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # Allow the ECS Tasks to download images from ECR
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'

                # Allow the ECS tasks to upload logs to CloudWatch
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'

  PrivateDNSNamespace:
    Type: 'AWS::ServiceDiscovery::PrivateDnsNamespace'
    Properties:
      Vpc: !Ref VPC
      Name: !Ref PrivateDNSNamespaceName

  ServiceDiscoveryServiceQuestion:
    Type: 'AWS::ServiceDiscovery::Service'
    Properties:
      DnsConfig:
        DnsRecords:
          - Type: SRV
            TTL: 60
        NamespaceId: !Ref PrivateDNSNamespace
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: 'questions.store'

  ServiceDiscoveryServiceMatching:
    Type: 'AWS::ServiceDiscovery::Service'
    Properties:
      DnsConfig:
        DnsRecords:
          - Type: SRV
            TTL: 60
        NamespaceId: !Ref PrivateDNSNamespace
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: 'matching.store'

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'

  TaskDefinitionQuestion:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
          - Name: 'question-service'
            Image: '008129720001.dkr.ecr.ap-southeast-1.amazonaws.com/peerprep:question-service'
            Essential: true
            PortMappings:
              - ContainerPort: 80
                Protocol: tcp
            Environment:
              - Name: SERVICE_PORT
                Value: 80
      NetworkMode: awsvpc
      Memory: '512'
      Cpu: '256'

  TaskDefinitionMatching:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
          - Name: 'matching-service'
            Image: '008129720001.dkr.ecr.ap-southeast-1.amazonaws.com/peerprep:matching-service'
            Essential: true
            PortMappings:
              - ContainerPort: 80
                Protocol: tcp
            Environment:
              - Name: SERVICE_PORT
                Value: 80
      NetworkMode: awsvpc
      Memory: '512'
      Cpu: '256'

  ServiceQuestion:
    Type: AWS::ECS::Service
    DependsOn:
      - PrivateRouteOne
      - PrivateRouteTwo
      - PrivateRouteThree
    Properties: 
      Cluster: !Ref PeerprepECSCluster
      TaskDefinition: !Ref TaskDefinitionQuestion
      LaunchType: FARGATE
      DesiredCount: 1
      ServiceRegistries:
        - RegistryArn: !GetAtt ServiceDiscoveryServiceQuestion.Arn
          Port: 80
      NetworkConfiguration:
          AwsvpcConfiguration:
            AssignPublicIp: DISABLED
            Subnets:
              - !Ref PrivateSubnetOne
              - !Ref PrivateSubnetTwo
              - !Ref PrivateSubnetThree
            SecurityGroups:
              - !Ref ContainerSecurityGroup

  ServiceMatching: 
    Type: AWS::ECS::Service
    DependsOn:
      - PrivateRouteOne
      - PrivateRouteTwo
      - PrivateRouteThree
    Properties: 
      Cluster: !Ref PeerprepECSCluster
      TaskDefinition: !Ref TaskDefinitionMatching
      LaunchType: FARGATE
      DesiredCount: 1
      ServiceRegistries:
        - RegistryArn: !GetAtt ServiceDiscoveryServiceMatching.Arn
          Port: 80
      NetworkConfiguration:
          AwsvpcConfiguration:
            AssignPublicIp: DISABLED
            Subnets:
              - !Ref PrivateSubnetOne
              - !Ref PrivateSubnetTwo
              - !Ref PrivateSubnetThree
            SecurityGroups:
              - !Ref ContainerSecurityGroup

  AutoScalingTargetQuestion:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref MinContainersQuestion
      MaxCapacity: !Ref MaxContainersQuestion
      ResourceId: !Join ['/', [service, !Ref PeerprepECSCluster, !GetAtt ServiceQuestion.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt AutoScalingRole.Arn

  AutoScalingTargetMatching:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref MinContainersMatching
      MaxCapacity: !Ref MaxContainersMatching
      ResourceId: !Join ['/', [service, !Ref PeerprepECSCluster, !GetAtt ServiceMatching.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt AutoScalingRole.Arn

  AutoScalingPolicyQuestion:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ['', [!GetAtt ServiceQuestion.Name, '-AutoScalingPolicy']]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTargetQuestion
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: !Ref AutoScalingTargetValueQuestion

  AutoScalingPolicyMatching:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ['', [!GetAtt ServiceMatching.Name, '-AutoScalingPolicy']]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTargetMatching
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: !Ref AutoScalingTargetValueMatching

  HttpApiVPCLink:
    Type: AWS::ApiGatewayV2::VpcLink
    Properties: 
      Name: !Ref EnvironmentName
      SecurityGroupIds: 
        - !Ref ContainerSecurityGroup
      SubnetIds: 
        - !Ref PrivateSubnetOne
        - !Ref PrivateSubnetTwo
        - !Ref PrivateSubnetThree

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
  
  UserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      SupportedIdentityProviders:
        - COGNITO
      PreventUserExistenceErrors: ENABLED

  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Body:
        openapi: "3.0.1"
        info:
          title: !Ref EnvironmentName
        # components:
        #   securitySchemes:
        #     my-authorizer:
        #       type: oauth2
        #       flows: {}
        #       x-amazon-apigateway-authorizer:
        #         identitySource: "$request.header.Authorization"
        #         jwtConfiguration:
        #           audience:
        #           - !Ref 'UserPoolClient'
        #           issuer: !GetAtt 'UserPool.ProviderURL'
        #         type: jwt
        paths:
          /matching:
            x-amazon-apigateway-any-method:
              responses:
                default:
                  description: "Default response for ANY /matching"
          /questions:
            x-amazon-apigateway-any-method:
              responses:
                default:
                  description: "Default response for ANY /questions"
              x-amazon-apigateway-integration:
                payloadFormatVersion: "1.0"
                connectionId: !Ref HttpApiVPCLink
                type: "http_proxy"
                httpMethod: "ANY"
                uri: !GetAtt ServiceDiscoveryServiceQuestion.Arn
                connectionType: "VPC_LINK"
          /questions/{questionId}:
            parameters:
            - name: "questionId"
              in: "path"
              description: "Generated path parameter for questionId"
              required: true
              schema:
                type: "string"
            x-amazon-apigateway-any-method:
              responses:
                default:
                  description: "Default response for ANY /questions/{questionId}"
              x-amazon-apigateway-integration:
                payloadFormatVersion: "1.0"
                connectionId: !Ref HttpApiVPCLink
                type: "http_proxy"
                httpMethod: "ANY"
                uri: !GetAtt ServiceDiscoveryServiceQuestion.Arn
                connectionType: "VPC_LINK"
        x-amazon-apigateway-cors:
          # This is a Test client web app that invokes the API, used in the blog post, for demostration purposes only.
          # In production, make sure that you do NOT allow any untrusted origin.
          allowOrigins:
            - 'https://master.d2wfcislijzove.amplifyapp.com'
            - 'https://development.d2wfcislijzove.amplifyapp.com'
          allowHeaders:
            - '*'
          allowMethods:
            - 'PUT'
            - 'GET'
            - 'POST'
            - 'DELETE'
        x-amazon-apigateway-importexport-version: "1.0"

  HttpApiStage:
    Type: 'AWS::ApiGatewayV2::Stage'
    Properties:
      StageName: 'production'
      ApiId: !Ref 'HttpApi'
      AutoDeploy: true
  HttpApiStage:
    Type: 'AWS::ApiGatewayV2::Stage'
    Properties:
      StageName: 'development'
      ApiId: !Ref 'HttpApi'
      AutoDeploy: true   

Outputs:
  APITestPage:
    Description: The URL of the sample web app client, used to test the sample API
    Value: !Join
      - ''
      - - "https://master.d2wfcislijzove.amplifyapp.com/?stackregion="
        - !Ref 'AWS::Region'
        - "&stackhttpapi="
        - !Ref 'HttpApi'
        - "&stackuserpool="
        - !Ref 'UserPool'
        - "&stackuserpoolclient="
        - !Ref 'UserPoolClient'
  APIInvokeURL:
    Description: Invoke URL for the HTTP API
    Value: !Sub 'https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com'
  APIInvokeURLQuestion:
    Description: Invoke URL for the HTTP API for the service Question
    Value: !Sub 'https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/questions'
  APIInvokeURLMatching:
    Description: Invoke URL for the HTTP API for the service Matching
    Value: !Sub 'https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/matching'
  APIId:
    Description: The ID of the HTTP API
    Value: !Ref 'HttpApi'
  ECSClusterName:
    Description: The name of the ECS cluster
    Value: !Ref 'PeerprepECSCluster'
  VpcId:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref 'VPC'
  ContainerSecurityGroup:
    Description: A security group used to allow Fargate containers to receive traffic
    Value: !Ref 'ContainerSecurityGroup'
  PrivateDNSNamespace:
    Description: The ID of the private DNS namespace.
    Value: !Ref 'PrivateDNSNamespace' 